# Generated by Django 5.0.6 on 2024-07-10 10:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertiser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email рекламодателя', max_length=254, unique=True, verbose_name='Email')),
                ('telegram', models.CharField(blank=True, help_text='Telegram аккаунт рекламодателя', max_length=50, null=True, verbose_name='Telegram')),
                ('phone', models.CharField(blank=True, help_text='Телефон рекламодателя', max_length=20, null=True, verbose_name='Телефон')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'Рекламодатель',
                'verbose_name_plural': 'Рекламодатели',
            },
        ),
        migrations.CreateModel(
            name='EmailConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('confirmation_code', models.CharField(max_length=6, verbose_name='Код подтверждения')),
                ('is_confirmed', models.BooleanField(default=False, verbose_name='Подтверждено')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
        ),
        migrations.CreateModel(
            name='Webmaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email вебмастера', max_length=254, unique=True, verbose_name='Email')),
                ('telegram', models.CharField(blank=True, help_text='Telegram аккаунт вебмастера', max_length=50, null=True, verbose_name='Telegram')),
                ('phone', models.CharField(blank=True, help_text='Телефон вебмастера', max_length=20, null=True, verbose_name='Телефон')),
                ('experience', models.TextField(blank=True, help_text='Опыт вебмастера', null=True, verbose_name='Опыт')),
                ('stats_screenshot', models.ImageField(blank=True, help_text='Скриншот статистики вебмастера', null=True, upload_to='screenshots/', verbose_name='Скриншот статистики')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'Вебмастер',
                'verbose_name_plural': 'Вебмастера',
            },
        ),
        migrations.CreateModel(
            name='CustomAdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('finance', 'Финансы'), ('manager', 'Менеджер'), ('designer', 'Верстальщик'), ('call_center_operator', 'Оператор Колл-центра')], help_text='Роль пользователя', max_length=20, verbose_name='Роль')),
                ('telegram', models.CharField(blank=True, help_text='Telegram аккаунт пользователя', max_length=50, null=True, verbose_name='Telegram')),
                ('phone', models.CharField(blank=True, help_text='Телефон пользователя', max_length=20, null=True, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customadminuser_set', related_query_name='customadminuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customadminuser_set', related_query_name='customadminuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Административный пользователь',
                'verbose_name_plural': 'Административные пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
